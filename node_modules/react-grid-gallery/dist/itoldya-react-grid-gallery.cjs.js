'use strict';

var PropTypes = require('prop-types');
var React = require('react');
var Lightbox = require('react-images');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Lightbox__default = /*#__PURE__*/_interopDefaultLegacy(Lightbox);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var CheckButton = /*#__PURE__*/function (_Component) {
  _inherits(CheckButton, _Component);

  var _super = _createSuper(CheckButton);

  function CheckButton(props) {
    var _this;

    _classCallCheck(this, CheckButton);

    _this = _super.call(this, props);
    _this.state = {
      hover: _this.props.hover
    };
    _this.fill = _this.fill.bind(_assertThisInitialized(_this));
    _this.visibility = _this.visibility.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CheckButton, [{
    key: "fill",
    value: function fill() {
      if (this.props.isSelected) return this.props.selectedColor;else if (this.state.hover) return this.props.hoverColor;
      return this.props.color;
    }
  }, {
    key: "visibility",
    value: function visibility() {
      if (this.props.isSelected || this.props.isSelectable && this.props.parentHover) return 'visible';
      return 'hidden';
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var circleStyle = {
        display: this.props.isSelected ? "block" : "none"
      };
      return /*#__PURE__*/React__default["default"].createElement("div", {
        "data-testid": "grid-gallery-item_check-button",
        title: "Select",
        style: {
          visibility: this.visibility(),
          background: 'none',
          "float": 'left',
          width: '36px',
          height: '36px',
          border: 'none',
          padding: '6px',
          cursor: 'pointer',
          pointerEvents: 'visible'
        },
        onClick: this.props.onClick ? function (e) {
          return _this2.props.onClick(_this2.props.index, e);
        } : null,
        onMouseOver: function onMouseOver(e) {
          return _this2.setState({
            hover: true
          });
        },
        onMouseOut: function onMouseOut(e) {
          return _this2.setState({
            hover: false
          });
        }
      }, /*#__PURE__*/React__default["default"].createElement("svg", {
        fill: this.fill(),
        height: "24",
        viewBox: "0 0 24 24",
        width: "24",
        xmlns: "http://www.w3.org/2000/svg"
      }, /*#__PURE__*/React__default["default"].createElement("radialGradient", {
        id: "shadow",
        cx: "38",
        cy: "95.488",
        r: "10.488",
        gradientTransform: "matrix(1 0 0 -1 -26 109)",
        gradientUnits: "userSpaceOnUse"
      }, /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: ".832",
        stopColor: "#010101"
      }), /*#__PURE__*/React__default["default"].createElement("stop", {
        offset: "1",
        stopColor: "#010101",
        stopOpacity: "0"
      })), /*#__PURE__*/React__default["default"].createElement("circle", {
        style: circleStyle,
        opacity: ".26",
        fill: "url(#shadow)",
        cx: "12",
        cy: "13.512",
        r: "10.488"
      }), /*#__PURE__*/React__default["default"].createElement("circle", {
        style: circleStyle,
        fill: "#FFF",
        cx: "12",
        cy: "12.2",
        r: "8.292"
      }), /*#__PURE__*/React__default["default"].createElement("path", {
        d: "M0 0h24v24H0z",
        fill: "none"
      }), /*#__PURE__*/React__default["default"].createElement("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
      })));
    }
  }]);

  return CheckButton;
}(React.Component);

CheckButton.propTypes = {
  index: PropTypes__default["default"].number,
  color: PropTypes__default["default"].string,
  isSelectable: PropTypes__default["default"].bool,
  isSelected: PropTypes__default["default"].bool,
  selectedColor: PropTypes__default["default"].string,
  parentHover: PropTypes__default["default"].bool,
  hover: PropTypes__default["default"].bool,
  hoverColor: PropTypes__default["default"].string,
  onClick: PropTypes__default["default"].func
};
CheckButton.defaultProps = {
  isSelectable: true,
  isSelected: false,
  parentHover: false,
  hover: false
};

var Image = /*#__PURE__*/function (_Component) {
  _inherits(Image, _Component);

  var _super = _createSuper(Image);

  function Image(props) {
    var _this;

    _classCallCheck(this, Image);

    _this = _super.call(this, props);
    _this.state = {
      hover: false
    };
    return _this;
  }

  _createClass(Image, [{
    key: "tagStyle",
    value: function tagStyle() {
      if (this.props.tagStyle) return this.props.tagStyle;
      return {
        display: "inline",
        padding: ".2em .6em .3em",
        fontSize: "75%",
        fontWeight: "600",
        lineHeight: "1",
        color: "yellow",
        background: "rgba(0,0,0,0.65)",
        textAlign: "center",
        whiteSpace: "nowrap",
        verticalAlign: "baseline",
        borderRadius: ".25em"
      };
    }
  }, {
    key: "tileViewportStyle",
    value: function tileViewportStyle() {
      if (this.props.tileViewportStyle) return this.props.tileViewportStyle.call(this);
      var nanoBase64Backgorund = {};

      if (this.props.item.nano) {
        nanoBase64Backgorund = {
          background: "url(".concat(this.props.item.nano, ")"),
          backgroundSize: 'cover',
          backgroundPosition: 'center center'
        };
      }

      if (this.props.item.isSelected) return Object.assign({
        width: this.props.item.vwidth - 32,
        height: this.props.height - 32,
        margin: 16,
        overflow: "hidden"
      }, nanoBase64Backgorund);
      return Object.assign({
        width: this.props.item.vwidth,
        height: this.props.height,
        overflow: "hidden"
      }, nanoBase64Backgorund);
    }
  }, {
    key: "thumbnailStyle",
    value: function thumbnailStyle() {
      if (this.props.thumbnailStyle) return this.props.thumbnailStyle.call(this);
      var rotationTransformValue = undefined;

      switch (this.props.item.orientation) {
        case 3:
          rotationTransformValue = "rotate(180deg)";
          break;

        case 6:
          rotationTransformValue = "rotate(90deg)";
          break;

        case 8:
          rotationTransformValue = "rotate(270deg)";
          break;

        case 2:
          rotationTransformValue = "rotateY(180deg)";
          break;

        case 4:
          rotationTransformValue = "rotate(180deg) rotateY(180deg)";
          break;

        case 5:
          rotationTransformValue = "rotate(270deg) rotateY(180deg)";
          break;

        case 7:
          rotationTransformValue = "rotate(90deg) rotateY(180deg)";
          break;
      }

      if (this.props.item.isSelected) {
        var ratio = this.props.item.scaletwidth / this.props.height;
        var height = 0;
        var width = 0;
        var viewportHeight = this.props.height - 32;
        var viewportWidth = this.props.item.vwidth - 32;

        if (this.props.item.scaletwidth > this.props.height) {
          width = this.props.item.scaletwidth - 32;
          height = Math.floor(width / ratio);
        } else {
          height = this.props.height - 32;
          width = Math.floor(height * ratio);
        }

        var marginTop = -Math.abs(Math.floor((viewportHeight - height) / 2));
        var marginLeft = -Math.abs(Math.floor((viewportWidth - width) / 2));
        return {
          cursor: 'pointer',
          width: width,
          height: height,
          marginLeft: marginLeft,
          marginTop: marginTop,
          transform: rotationTransformValue
        };
      }

      return {
        cursor: 'pointer',
        width: this.props.item.scaletwidth,
        height: this.props.height,
        marginLeft: this.props.item.marginLeft,
        marginTop: 0,
        transform: rotationTransformValue
      };
    }
  }, {
    key: "renderCheckButton",
    value: function renderCheckButton() {
      return /*#__PURE__*/React__default["default"].createElement(CheckButton, {
        key: "Select",
        index: this.props.index,
        color: "rgba(255, 255, 255, 0.7)",
        selectedColor: "#4285f4",
        hoverColor: "rgba(255, 255, 255, 1)",
        isSelected: this.props.item.isSelected,
        isSelectable: this.props.isSelectable,
        onClick: this.props.isSelectable ? this.props.onSelectImage : null,
        parentHover: this.state.hover
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var alt = this.props.item.alt ? this.props.item.alt : "";
      var tags = typeof this.props.item.tags === 'undefined' ? /*#__PURE__*/React__default["default"].createElement("noscript", null) : this.props.item.tags.map(function (tag) {
        var key = tag.key || (typeof tag.value === 'string' ? tag.value : null) || tag.title;
        return /*#__PURE__*/React__default["default"].createElement("div", {
          title: tag.title,
          key: "tag-" + key,
          style: {
            display: "inline-block",
            cursor: 'pointer',
            pointerEvents: 'visible',
            margin: "2px"
          }
        }, /*#__PURE__*/React__default["default"].createElement("span", {
          style: _this2.tagStyle()
        }, tag.value));
      });
      var customOverlay = typeof this.props.item.customOverlay === 'undefined' ? /*#__PURE__*/React__default["default"].createElement("noscript", null) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_custom-overlay",
        key: "custom-overlay-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: this.state.hover ? 1 : 0,
          position: "absolute",
          height: "100%",
          width: "100%"
        }
      }, this.props.item.customOverlay);
      var thumbnailProps = {
        key: "img-" + this.props.index,
        src: this.props.item.thumbnail,
        alt: alt,
        title: typeof this.props.item.caption === 'string' ? this.props.item.caption : null,
        style: this.thumbnailStyle(),
        'data-testid': "grid-gallery-item_thumbnail"
      };
      var ThumbnailImageComponent = this.props.thumbnailImageComponent;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile",
        "data-testid": "grid-gallery-item",
        key: "tile-" + this.props.index,
        onMouseEnter: function onMouseEnter(e) {
          return _this2.setState({
            hover: true
          });
        },
        onMouseLeave: function onMouseLeave(e) {
          return _this2.setState({
            hover: false
          });
        },
        style: {
          margin: this.props.margin,
          WebkitUserSelect: "none",
          position: "relative",
          "float": "left",
          background: "#eee",
          padding: "0px"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-icon-bar",
        key: "tile-icon-bar-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: 1,
          position: "absolute",
          height: "36px",
          width: "100%"
        }
      }, this.renderCheckButton()), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-bottom-bar",
        key: "tile-bottom-bar-" + this.props.index,
        style: {
          padding: "2px",
          pointerEvents: "none",
          position: "absolute",
          minHeight: "0px",
          maxHeight: "160px",
          width: "100%",
          bottom: "0px",
          overflow: "hidden"
        }
      }, tags), customOverlay, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-overlay",
        key: "tile-overlay-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: 1,
          position: "absolute",
          height: "100%",
          width: "100%",
          background: this.state.hover && !this.props.item.isSelected && this.props.isSelectable ? 'linear-gradient(to bottom,rgba(0,0,0,0.26),transparent 56px,transparent)' : 'none'
        }
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-viewport",
        "data-testid": "grid-gallery-item_viewport",
        style: this.tileViewportStyle(),
        key: "tile-viewport-" + this.props.index,
        onClick: this.props.onClick ? function (e) {
          return _this2.props.onClick.call(_this2, _this2.props.index, e);
        } : null
      }, ThumbnailImageComponent ? /*#__PURE__*/React__default["default"].createElement(ThumbnailImageComponent, _extends({}, this.props, {
        imageProps: thumbnailProps
      })) : /*#__PURE__*/React__default["default"].createElement("img", thumbnailProps)), this.props.item.thumbnailCaption && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-description",
        style: {
          background: "white",
          height: "100%",
          width: "100%",
          margin: 0,
          userSelect: "text",
          WebkitUserSelect: "text",
          MozUserSelect: "text",
          overflow: "hidden"
        }
      }, this.props.item.thumbnailCaption));
    }
  }]);

  return Image;
}(React.Component);

Image.propTypes = {
  item: PropTypes__default["default"].object,
  index: PropTypes__default["default"].number,
  margin: PropTypes__default["default"].number,
  height: PropTypes__default["default"].number,
  isSelectable: PropTypes__default["default"].bool,
  onClick: PropTypes__default["default"].func,
  onSelectImage: PropTypes__default["default"].func,
  tileViewportStyle: PropTypes__default["default"].func,
  thumbnailStyle: PropTypes__default["default"].func,
  tagStyle: PropTypes__default["default"].object,
  customOverlay: PropTypes__default["default"].element,
  thumbnailImageComponent: PropTypes__default["default"].func
};
Image.defaultProps = {
  isSelectable: true,
  hover: false
};

var calculateCutOff = function calculateCutOff(len, delta, items) {
  var cutoff = [];
  var cutsum = 0;

  for (var i in items) {
    var item = items[i];
    var fractOfLen = item.scaletwidth / len;
    cutoff[i] = Math.floor(fractOfLen * delta);
    cutsum += cutoff[i];
  }

  var stillToCutOff = delta - cutsum;

  while (stillToCutOff > 0) {
    for (i in cutoff) {
      cutoff[i]++;
      stillToCutOff--;
      if (stillToCutOff < 0) break;
    }
  }

  return cutoff;
};

var buildImageRow = function buildImageRow(data, _ref) {
  var containerWidth = _ref.containerWidth,
      margin = _ref.margin;
  var row = [];
  var len = 0;
  var imgMargin = 2 * margin;

  while (data.items.length > 0 && len < containerWidth) {
    var item = data.items.shift();
    row.push(item);
    len += item.scaletwidth + imgMargin;
  }

  var delta = len - containerWidth;

  if (row.length > 0 && delta > 0) {
    var cutoff = calculateCutOff(len, delta, row);

    for (var i in row) {
      var pixelsToRemove = cutoff[i];
      item = row[i];
      item.marginLeft = -Math.abs(Math.floor(pixelsToRemove / 2));
      item.vwidth = item.scaletwidth - pixelsToRemove;
    }
  } else {
    for (var j in row) {
      item = row[j];
      item.marginLeft = 0;
      item.vwidth = item.scaletwidth;
    }
  }

  return row;
};

var renderThumbs = function renderThumbs(images, _ref2) {
  var containerWidth = _ref2.containerWidth,
      maxRows = _ref2.maxRows,
      rowHeight = _ref2.rowHeight,
      margin = _ref2.margin;
  rowHeight = typeof rowHeight === "undefined" ? 180 : rowHeight;
  margin = typeof margin === "undefined" ? 2 : margin;
  if (!images) return [];
  if (!containerWidth) return [];
  var items = images.slice();
  items = items.map(function (item) {
    return _objectSpread2(_objectSpread2({}, item), {}, {
      scaletwidth: Math.floor(rowHeight * (item.thumbnailWidth / item.thumbnailHeight))
    });
  });
  var data = {
    items: items
  };
  var thumbs = [];
  var rows = [];

  while (data.items.length > 0) {
    rows.push(buildImageRow(data, {
      containerWidth: containerWidth,
      margin: margin
    }));
  }

  for (var r in rows) {
    for (var i in rows[r]) {
      var item = _objectSpread2(_objectSpread2({}, rows[r][i]), {}, {
        rowIndex: parseInt(r)
      });

      if (maxRows) {
        if (r < maxRows) {
          thumbs.push(item);
        }
      } else {
        thumbs.push(item);
      }
    }
  }

  return thumbs;
};

var Gallery = /*#__PURE__*/function (_Component) {
  _inherits(Gallery, _Component);

  var _super = _createSuper(Gallery);

  function Gallery(props) {
    var _this;

    _classCallCheck(this, Gallery);

    _this = _super.call(this, props);
    _this.state = {
      lightboxIsOpen: _this.props.isOpen,
      currentImage: _this.props.currentImage,
      containerWidth: 0
    };
    _this.onResize = _this.onResize.bind(_assertThisInitialized(_this));
    _this.closeLightbox = _this.closeLightbox.bind(_assertThisInitialized(_this));
    _this.gotoImage = _this.gotoImage.bind(_assertThisInitialized(_this));
    _this.gotoNext = _this.gotoNext.bind(_assertThisInitialized(_this));
    _this.gotoPrevious = _this.gotoPrevious.bind(_assertThisInitialized(_this));
    _this.onClickImage = _this.onClickImage.bind(_assertThisInitialized(_this));
    _this.openLightbox = _this.openLightbox.bind(_assertThisInitialized(_this));
    _this.onSelectImage = _this.onSelectImage.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Gallery, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onResize();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(np) {
      if (this.state.currentImage > np.images.length - 1) {
        this.setState({
          currentImage: np.images.length - 1
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this._gallery) return;

      if (this.getContainerWidth() !== this.state.containerWidth) {
        this.onResize();
      }
    }
  }, {
    key: "onResize",
    value: function onResize() {
      if (!this._gallery) return;
      var containerWidth = this.getContainerWidth();
      this.setState({
        containerWidth: containerWidth
      });
    }
  }, {
    key: "getContainerWidth",
    value: function getContainerWidth() {
      var width = this._gallery.clientWidth;

      try {
        width = this._gallery.getBoundingClientRect().width;
      } catch (err) {}

      return Math.floor(width);
    }
  }, {
    key: "openLightbox",
    value: function openLightbox(index, event) {
      if (event) {
        event.preventDefault();
      }

      if (this.props.lightboxWillOpen) {
        this.props.lightboxWillOpen.call(this, index);
      }

      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, index);
      }

      this.setState({
        currentImage: index,
        lightboxIsOpen: true
      });
    }
  }, {
    key: "closeLightbox",
    value: function closeLightbox() {
      if (this.props.lightboxWillClose) {
        this.props.lightboxWillClose.call(this);
      }

      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, 0);
      }

      this.setState({
        currentImage: 0,
        lightboxIsOpen: false
      });
    }
  }, {
    key: "gotoPrevious",
    value: function gotoPrevious() {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, this.state.currentImage - 1);
      }

      this.setState({
        currentImage: this.state.currentImage - 1
      });
    }
  }, {
    key: "gotoNext",
    value: function gotoNext() {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, this.state.currentImage + 1);
      }

      this.setState({
        currentImage: this.state.currentImage + 1
      });
    }
  }, {
    key: "onClickImage",
    value: function onClickImage() {
      if (this.state.currentImage === this.props.images.length - 1) return;
      this.gotoNext();
    }
  }, {
    key: "onSelectImage",
    value: function onSelectImage(index, event) {
      event.preventDefault();
      if (this.props.onSelectImage) this.props.onSelectImage.call(this, index, this.props.images[index]);
    }
  }, {
    key: "gotoImage",
    value: function gotoImage(index) {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, index);
      }

      this.setState({
        currentImage: index
      });
    }
  }, {
    key: "getOnClickThumbnailFn",
    value: function getOnClickThumbnailFn() {
      if (!this.props.onClickThumbnail && this.props.enableLightbox) return this.openLightbox;
      if (this.props.onClickThumbnail) return this.props.onClickThumbnail;
      return null;
    }
  }, {
    key: "getOnClickLightboxThumbnailFn",
    value: function getOnClickLightboxThumbnailFn() {
      if (!this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.gotoImage;
      if (this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.props.onClickLightboxThumbnail;
      return null;
    }
  }, {
    key: "getOnClickImageFn",
    value: function getOnClickImageFn() {
      if (this.props.onClickImage) return this.props.onClickImage;
      return this.onClickImage;
    }
  }, {
    key: "getOnClickPrevFn",
    value: function getOnClickPrevFn() {
      if (this.props.onClickPrev) return this.props.onClickPrev;
      return this.gotoPrevious;
    }
  }, {
    key: "getOnClickNextFn",
    value: function getOnClickNextFn() {
      if (this.props.onClickNext) return this.props.onClickNext;
      return this.gotoNext;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          maxRows = _this$props.maxRows,
          rowHeight = _this$props.rowHeight,
          margin = _this$props.margin;
      var containerWidth = this.state.containerWidth;
      var thumbnails = renderThumbs(this.props.images, {
        containerWidth: containerWidth,
        maxRows: maxRows,
        rowHeight: rowHeight,
        margin: margin
      });
      var images = thumbnails.map(function (item, idx) {
        return /*#__PURE__*/React__default["default"].createElement(Image, {
          key: "Image-" + idx + "-" + item.src,
          item: item,
          index: idx,
          margin: _this2.props.margin,
          height: _this2.props.rowHeight,
          isSelectable: _this2.props.enableImageSelection,
          onClick: _this2.getOnClickThumbnailFn(),
          onSelectImage: _this2.onSelectImage,
          tagStyle: _this2.props.tagStyle,
          tileViewportStyle: _this2.props.tileViewportStyle,
          thumbnailStyle: _this2.props.thumbnailStyle,
          thumbnailImageComponent: _this2.props.thumbnailImageComponent
        });
      });
      var resizeIframeStyles = {
        height: 0,
        margin: 0,
        padding: 0,
        overflow: "hidden",
        borderWidth: 0,
        position: "fixed",
        backgroundColor: "transparent",
        width: "100%"
      };
      return /*#__PURE__*/React__default["default"].createElement("div", {
        id: this.props.id,
        className: "ReactGridGallery",
        ref: function ref(c) {
          return _this2._gallery = c;
        }
      }, /*#__PURE__*/React__default["default"].createElement("iframe", {
        style: resizeIframeStyles,
        ref: function ref(c) {
          return c && c.contentWindow && c.contentWindow.addEventListener('resize', _this2.onResize);
        }
      }), images, /*#__PURE__*/React__default["default"].createElement(Lightbox__default["default"], _extends({
        images: this.props.images,
        backdropClosesModal: this.props.backdropClosesModal,
        currentImage: this.state.currentImage,
        preloadNextImage: this.props.preloadNextImage,
        customControls: this.props.customControls,
        enableKeyboardInput: this.props.enableKeyboardInput,
        imageCountSeparator: this.props.imageCountSeparator,
        isOpen: this.state.lightboxIsOpen,
        onClickImage: this.getOnClickImageFn(),
        onClickNext: this.getOnClickNextFn(),
        onClickPrev: this.getOnClickPrevFn(),
        showCloseButton: this.props.showCloseButton,
        showImageCount: this.props.showImageCount,
        onClose: this.closeLightbox,
        width: this.props.lightboxWidth,
        theme: this.props.theme,
        onClickThumbnail: this.getOnClickLightboxThumbnailFn(),
        showThumbnails: this.props.showLightboxThumbnails
      }, this.props.lightBoxProps)));
    }
  }]);

  return Gallery;
}(React.Component);

Gallery.displayName = 'Gallery';
Gallery.propTypes = {
  images: PropTypes__default["default"].arrayOf(PropTypes__default["default"].shape({
    src: PropTypes__default["default"].string.isRequired,
    nano: PropTypes__default["default"].string,
    alt: PropTypes__default["default"].string,
    thumbnail: PropTypes__default["default"].string.isRequired,
    srcset: PropTypes__default["default"].array,
    caption: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element]),
    tags: PropTypes__default["default"].arrayOf(PropTypes__default["default"].shape({
      value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element]).isRequired,
      title: PropTypes__default["default"].string.isRequired,
      key: PropTypes__default["default"].string
    })),
    thumbnailWidth: PropTypes__default["default"].number.isRequired,
    thumbnailHeight: PropTypes__default["default"].number.isRequired,
    isSelected: PropTypes__default["default"].bool,
    thumbnailCaption: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element])
  })).isRequired,
  id: PropTypes__default["default"].string,
  enableImageSelection: PropTypes__default["default"].bool,
  onSelectImage: PropTypes__default["default"].func,
  rowHeight: PropTypes__default["default"].number,
  maxRows: PropTypes__default["default"].number,
  margin: PropTypes__default["default"].number,
  onClickThumbnail: PropTypes__default["default"].func,
  lightboxWillOpen: PropTypes__default["default"].func,
  lightboxWillClose: PropTypes__default["default"].func,
  enableLightbox: PropTypes__default["default"].bool,
  backdropClosesModal: PropTypes__default["default"].bool,
  currentImage: PropTypes__default["default"].number,
  preloadNextImage: PropTypes__default["default"].bool,
  customControls: PropTypes__default["default"].arrayOf(PropTypes__default["default"].node),
  currentImageWillChange: PropTypes__default["default"].func,
  enableKeyboardInput: PropTypes__default["default"].bool,
  imageCountSeparator: PropTypes__default["default"].string,
  isOpen: PropTypes__default["default"].bool,
  onClickImage: PropTypes__default["default"].func,
  onClickNext: PropTypes__default["default"].func,
  onClickPrev: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  showCloseButton: PropTypes__default["default"].bool,
  showImageCount: PropTypes__default["default"].bool,
  lightboxWidth: PropTypes__default["default"].number,
  tileViewportStyle: PropTypes__default["default"].func,
  thumbnailStyle: PropTypes__default["default"].func,
  showLightboxThumbnails: PropTypes__default["default"].bool,
  onClickLightboxThumbnail: PropTypes__default["default"].func,
  tagStyle: PropTypes__default["default"].object,
  thumbnailImageComponent: PropTypes__default["default"].func,
  lightBoxProps: PropTypes__default["default"].object
};
Gallery.defaultProps = {
  id: "ReactGridGallery",
  enableImageSelection: true,
  rowHeight: 180,
  margin: 2,
  enableLightbox: true,
  backdropClosesModal: false,
  currentImage: 0,
  preloadNextImage: true,
  enableKeyboardInput: true,
  imageCountSeparator: ' of ',
  isOpen: false,
  showCloseButton: true,
  showImageCount: true,
  lightboxWidth: 1024,
  showLightboxThumbnails: false,
  lightBoxProps: {}
};

module.exports = Gallery;
