'use strict';

var PropTypes = require('prop-types');
var React = require('react');
var Lightbox = require('react-images');
var Image = require('./Image.js');
var renderThumbs = require('./renderThumbs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Lightbox__default = /*#__PURE__*/_interopDefaultLegacy(Lightbox);

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Gallery = /*#__PURE__*/function (_Component) {
  _inherits(Gallery, _Component);

  var _super = _createSuper(Gallery);

  function Gallery(props) {
    var _this;

    _classCallCheck(this, Gallery);

    _this = _super.call(this, props);
    _this.state = {
      lightboxIsOpen: _this.props.isOpen,
      currentImage: _this.props.currentImage,
      containerWidth: _this.props.defaultContainerWidth
    };
    _this.onResize = _this.onResize.bind(_assertThisInitialized(_this));
    _this.closeLightbox = _this.closeLightbox.bind(_assertThisInitialized(_this));
    _this.gotoImage = _this.gotoImage.bind(_assertThisInitialized(_this));
    _this.gotoNext = _this.gotoNext.bind(_assertThisInitialized(_this));
    _this.gotoPrevious = _this.gotoPrevious.bind(_assertThisInitialized(_this));
    _this.onClickImage = _this.onClickImage.bind(_assertThisInitialized(_this));
    _this.openLightbox = _this.openLightbox.bind(_assertThisInitialized(_this));
    _this.onSelectImage = _this.onSelectImage.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Gallery, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.onResize();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (!this._gallery) return;

      if (this.getContainerWidth() !== this.state.containerWidth) {
        this.onResize();
      }
    }
  }, {
    key: "onResize",
    value: function onResize() {
      if (!this._gallery) return;
      var containerWidth = this.getContainerWidth();
      this.setState({
        containerWidth: containerWidth
      });
    }
  }, {
    key: "getContainerWidth",
    value: function getContainerWidth() {
      var width = this._gallery.clientWidth;

      try {
        width = this._gallery.getBoundingClientRect().width;
      } catch (err) {}

      return Math.floor(width);
    }
  }, {
    key: "getCurrentImageIndex",
    value: function getCurrentImageIndex() {
      return Math.min(this.state.currentImage, this.props.images.length - 1);
    }
  }, {
    key: "openLightbox",
    value: function openLightbox(index, event) {
      if (event) {
        event.preventDefault();
      }

      if (this.props.lightboxWillOpen) {
        this.props.lightboxWillOpen.call(this, index);
      }

      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, index);
      }

      this.setState({
        currentImage: index,
        lightboxIsOpen: true
      });
    }
  }, {
    key: "closeLightbox",
    value: function closeLightbox() {
      if (this.props.lightboxWillClose) {
        this.props.lightboxWillClose.call(this);
      }

      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, 0);
      }

      this.setState({
        currentImage: 0,
        lightboxIsOpen: false
      });
    }
  }, {
    key: "gotoPrevious",
    value: function gotoPrevious() {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, this.getCurrentImageIndex() - 1);
      }

      this.setState({
        currentImage: this.getCurrentImageIndex() - 1
      });
    }
  }, {
    key: "gotoNext",
    value: function gotoNext() {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, this.getCurrentImageIndex() + 1);
      }

      this.setState({
        currentImage: this.getCurrentImageIndex() + 1
      });
    }
  }, {
    key: "onClickImage",
    value: function onClickImage() {
      if (this.state.currentImage === this.props.images.length - 1) return;
      this.gotoNext();
    }
  }, {
    key: "onSelectImage",
    value: function onSelectImage(index, event) {
      event.preventDefault();
      if (this.props.onSelectImage) this.props.onSelectImage.call(this, index, this.props.images[index]);
    }
  }, {
    key: "gotoImage",
    value: function gotoImage(index) {
      if (this.props.currentImageWillChange) {
        this.props.currentImageWillChange.call(this, index);
      }

      this.setState({
        currentImage: index
      });
    }
  }, {
    key: "getOnClickThumbnailFn",
    value: function getOnClickThumbnailFn() {
      if (!this.props.onClickThumbnail && this.props.enableLightbox) return this.openLightbox;
      if (this.props.onClickThumbnail) return this.props.onClickThumbnail;
      return null;
    }
  }, {
    key: "getOnClickLightboxThumbnailFn",
    value: function getOnClickLightboxThumbnailFn() {
      if (!this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.gotoImage;
      if (this.props.onClickLightboxThumbnail && this.props.showLightboxThumbnails) return this.props.onClickLightboxThumbnail;
      return null;
    }
  }, {
    key: "getOnClickImageFn",
    value: function getOnClickImageFn() {
      if (this.props.onClickImage) return this.props.onClickImage;
      return this.onClickImage;
    }
  }, {
    key: "getOnClickPrevFn",
    value: function getOnClickPrevFn() {
      if (this.props.onClickPrev) return this.props.onClickPrev;
      return this.gotoPrevious;
    }
  }, {
    key: "getOnClickNextFn",
    value: function getOnClickNextFn() {
      if (this.props.onClickNext) return this.props.onClickNext;
      return this.gotoNext;
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          maxRows = _this$props.maxRows,
          rowHeight = _this$props.rowHeight,
          margin = _this$props.margin;
      var containerWidth = this.state.containerWidth;
      var thumbnails = renderThumbs(this.props.images, {
        containerWidth: containerWidth,
        maxRows: maxRows,
        rowHeight: rowHeight,
        margin: margin
      });
      var images = thumbnails.map(function (item, idx) {
        return /*#__PURE__*/React__default["default"].createElement(Image, {
          key: "Image-" + idx + "-" + item.src,
          item: item,
          index: idx,
          margin: _this2.props.margin,
          height: _this2.props.rowHeight,
          isSelectable: _this2.props.enableImageSelection,
          onClick: _this2.getOnClickThumbnailFn(),
          onSelectImage: _this2.onSelectImage,
          tagStyle: _this2.props.tagStyle,
          tileViewportStyle: _this2.props.tileViewportStyle,
          thumbnailStyle: _this2.props.thumbnailStyle,
          thumbnailImageComponent: _this2.props.thumbnailImageComponent
        });
      });
      var resizeIframeStyles = {
        height: 0,
        margin: 0,
        padding: 0,
        overflow: "hidden",
        borderWidth: 0,
        position: "fixed",
        backgroundColor: "transparent",
        width: "100%"
      };
      return /*#__PURE__*/React__default["default"].createElement("div", {
        id: this.props.id,
        className: "ReactGridGallery",
        ref: function ref(c) {
          return _this2._gallery = c;
        }
      }, /*#__PURE__*/React__default["default"].createElement("iframe", {
        style: resizeIframeStyles,
        ref: function ref(c) {
          return c && c.contentWindow && c.contentWindow.addEventListener('resize', _this2.onResize);
        }
      }), images, /*#__PURE__*/React__default["default"].createElement(Lightbox__default["default"], _extends({
        images: this.props.images,
        backdropClosesModal: this.props.backdropClosesModal,
        currentImage: this.getCurrentImageIndex(),
        preloadNextImage: this.props.preloadNextImage,
        customControls: this.props.customControls,
        enableKeyboardInput: this.props.enableKeyboardInput,
        imageCountSeparator: this.props.imageCountSeparator,
        isOpen: this.state.lightboxIsOpen,
        onClickImage: this.getOnClickImageFn(),
        onClickNext: this.getOnClickNextFn(),
        onClickPrev: this.getOnClickPrevFn(),
        showCloseButton: this.props.showCloseButton,
        showImageCount: this.props.showImageCount,
        onClose: this.closeLightbox,
        width: this.props.lightboxWidth,
        theme: this.props.theme,
        onClickThumbnail: this.getOnClickLightboxThumbnailFn(),
        showThumbnails: this.props.showLightboxThumbnails
      }, this.props.lightBoxProps)));
    }
  }]);

  return Gallery;
}(React.Component);

Gallery.displayName = 'Gallery';
Gallery.propTypes = {
  images: PropTypes__default["default"].arrayOf(PropTypes__default["default"].shape({
    src: PropTypes__default["default"].string.isRequired,
    nano: PropTypes__default["default"].string,
    alt: PropTypes__default["default"].string,
    thumbnail: PropTypes__default["default"].string.isRequired,
    srcset: PropTypes__default["default"].array,
    caption: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element]),
    tags: PropTypes__default["default"].arrayOf(PropTypes__default["default"].shape({
      value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element]).isRequired,
      title: PropTypes__default["default"].string.isRequired,
      key: PropTypes__default["default"].string
    })),
    thumbnailWidth: PropTypes__default["default"].number.isRequired,
    thumbnailHeight: PropTypes__default["default"].number.isRequired,
    isSelected: PropTypes__default["default"].bool,
    thumbnailCaption: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].element])
  })).isRequired,
  id: PropTypes__default["default"].string,
  enableImageSelection: PropTypes__default["default"].bool,
  onSelectImage: PropTypes__default["default"].func,
  rowHeight: PropTypes__default["default"].number,
  maxRows: PropTypes__default["default"].number,
  margin: PropTypes__default["default"].number,
  defaultContainerWidth: PropTypes__default["default"].number,
  onClickThumbnail: PropTypes__default["default"].func,
  lightboxWillOpen: PropTypes__default["default"].func,
  lightboxWillClose: PropTypes__default["default"].func,
  enableLightbox: PropTypes__default["default"].bool,
  backdropClosesModal: PropTypes__default["default"].bool,
  currentImage: PropTypes__default["default"].number,
  preloadNextImage: PropTypes__default["default"].bool,
  customControls: PropTypes__default["default"].arrayOf(PropTypes__default["default"].node),
  currentImageWillChange: PropTypes__default["default"].func,
  enableKeyboardInput: PropTypes__default["default"].bool,
  imageCountSeparator: PropTypes__default["default"].string,
  isOpen: PropTypes__default["default"].bool,
  onClickImage: PropTypes__default["default"].func,
  onClickNext: PropTypes__default["default"].func,
  onClickPrev: PropTypes__default["default"].func,
  onClose: PropTypes__default["default"].func,
  showCloseButton: PropTypes__default["default"].bool,
  showImageCount: PropTypes__default["default"].bool,
  lightboxWidth: PropTypes__default["default"].number,
  tileViewportStyle: PropTypes__default["default"].func,
  thumbnailStyle: PropTypes__default["default"].func,
  showLightboxThumbnails: PropTypes__default["default"].bool,
  onClickLightboxThumbnail: PropTypes__default["default"].func,
  tagStyle: PropTypes__default["default"].object,
  thumbnailImageComponent: PropTypes__default["default"].func,
  lightBoxProps: PropTypes__default["default"].object
};
Gallery.defaultProps = {
  id: "ReactGridGallery",
  enableImageSelection: true,
  rowHeight: 180,
  margin: 2,
  defaultContainerWidth: 0,
  enableLightbox: true,
  backdropClosesModal: false,
  currentImage: 0,
  preloadNextImage: true,
  enableKeyboardInput: true,
  imageCountSeparator: ' of ',
  isOpen: false,
  showCloseButton: true,
  showImageCount: true,
  lightboxWidth: 1024,
  showLightboxThumbnails: false,
  lightBoxProps: {}
};

module.exports = Gallery;
//# sourceMappingURL=Gallery.js.map
