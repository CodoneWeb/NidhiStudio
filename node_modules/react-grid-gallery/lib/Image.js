'use strict';

var PropTypes = require('prop-types');
var React = require('react');
var CheckButton = require('./CheckButton.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Image = /*#__PURE__*/function (_Component) {
  _inherits(Image, _Component);

  var _super = _createSuper(Image);

  function Image(props) {
    var _this;

    _classCallCheck(this, Image);

    _this = _super.call(this, props);
    _this.state = {
      hover: false
    };
    return _this;
  }

  _createClass(Image, [{
    key: "tagStyle",
    value: function tagStyle() {
      if (this.props.tagStyle) return this.props.tagStyle;
      return {
        display: "inline",
        padding: ".2em .6em .3em",
        fontSize: "75%",
        fontWeight: "600",
        lineHeight: "1",
        color: "yellow",
        background: "rgba(0,0,0,0.65)",
        textAlign: "center",
        whiteSpace: "nowrap",
        verticalAlign: "baseline",
        borderRadius: ".25em"
      };
    }
  }, {
    key: "tileViewportStyle",
    value: function tileViewportStyle() {
      if (this.props.tileViewportStyle) return this.props.tileViewportStyle.call(this);
      var nanoBase64Backgorund = {};

      if (this.props.item.nano) {
        nanoBase64Backgorund = {
          background: "url(".concat(this.props.item.nano, ")"),
          backgroundSize: 'cover',
          backgroundPosition: 'center center'
        };
      }

      if (this.props.item.isSelected) return Object.assign({
        width: this.props.item.vwidth - 32,
        height: this.props.height - 32,
        margin: 16,
        overflow: "hidden"
      }, nanoBase64Backgorund);
      return Object.assign({
        width: this.props.item.vwidth,
        height: this.props.height,
        overflow: "hidden"
      }, nanoBase64Backgorund);
    }
  }, {
    key: "thumbnailStyle",
    value: function thumbnailStyle() {
      if (this.props.thumbnailStyle) return this.props.thumbnailStyle.call(this);
      var rotationTransformValue = undefined;

      switch (this.props.item.orientation) {
        case 3:
          rotationTransformValue = "rotate(180deg)";
          break;

        case 6:
          rotationTransformValue = "rotate(90deg)";
          break;

        case 8:
          rotationTransformValue = "rotate(270deg)";
          break;

        case 2:
          rotationTransformValue = "rotateY(180deg)";
          break;

        case 4:
          rotationTransformValue = "rotate(180deg) rotateY(180deg)";
          break;

        case 5:
          rotationTransformValue = "rotate(270deg) rotateY(180deg)";
          break;

        case 7:
          rotationTransformValue = "rotate(90deg) rotateY(180deg)";
          break;
      }

      if (this.props.item.isSelected) {
        var ratio = this.props.item.scaletwidth / this.props.height;
        var height = 0;
        var width = 0;
        var viewportHeight = this.props.height - 32;
        var viewportWidth = this.props.item.vwidth - 32;

        if (this.props.item.scaletwidth > this.props.height) {
          width = this.props.item.scaletwidth - 32;
          height = Math.floor(width / ratio);
        } else {
          height = this.props.height - 32;
          width = Math.floor(height * ratio);
        }

        var marginTop = -Math.abs(Math.floor((viewportHeight - height) / 2));
        var marginLeft = -Math.abs(Math.floor((viewportWidth - width) / 2));
        return {
          cursor: 'pointer',
          width: width,
          height: height,
          marginLeft: marginLeft,
          marginTop: marginTop,
          transform: rotationTransformValue
        };
      }

      return {
        cursor: 'pointer',
        width: this.props.item.scaletwidth,
        height: this.props.height,
        marginLeft: this.props.item.marginLeft,
        marginTop: 0,
        transform: rotationTransformValue
      };
    }
  }, {
    key: "renderCheckButton",
    value: function renderCheckButton() {
      return /*#__PURE__*/React__default["default"].createElement(CheckButton, {
        key: "Select",
        index: this.props.index,
        color: "rgba(255, 255, 255, 0.7)",
        selectedColor: "#4285f4",
        hoverColor: "rgba(255, 255, 255, 1)",
        isSelected: this.props.item.isSelected,
        isSelectable: this.props.isSelectable,
        onClick: this.props.isSelectable ? this.props.onSelectImage : null,
        parentHover: this.state.hover
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var alt = this.props.item.alt ? this.props.item.alt : "";
      var tags = typeof this.props.item.tags === 'undefined' ? /*#__PURE__*/React__default["default"].createElement("noscript", null) : this.props.item.tags.map(function (tag) {
        var key = tag.key || (typeof tag.value === 'string' ? tag.value : null) || tag.title;
        return /*#__PURE__*/React__default["default"].createElement("div", {
          title: tag.title,
          key: "tag-" + key,
          style: {
            display: "inline-block",
            cursor: 'pointer',
            pointerEvents: 'visible',
            margin: "2px"
          }
        }, /*#__PURE__*/React__default["default"].createElement("span", {
          style: _this2.tagStyle()
        }, tag.value));
      });
      var customOverlay = typeof this.props.item.customOverlay === 'undefined' ? /*#__PURE__*/React__default["default"].createElement("noscript", null) : /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_custom-overlay",
        key: "custom-overlay-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: this.state.hover ? 1 : 0,
          position: "absolute",
          height: "100%",
          width: "100%"
        }
      }, this.props.item.customOverlay);
      var thumbnailProps = {
        key: "img-" + this.props.index,
        src: this.props.item.thumbnail,
        alt: alt,
        title: typeof this.props.item.caption === 'string' ? this.props.item.caption : null,
        style: this.thumbnailStyle(),
        'data-testid': "grid-gallery-item_thumbnail"
      };
      var ThumbnailImageComponent = this.props.thumbnailImageComponent;
      return /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile",
        "data-testid": "grid-gallery-item",
        key: "tile-" + this.props.index,
        onMouseEnter: function onMouseEnter(e) {
          return _this2.setState({
            hover: true
          });
        },
        onMouseLeave: function onMouseLeave(e) {
          return _this2.setState({
            hover: false
          });
        },
        style: {
          margin: this.props.margin,
          WebkitUserSelect: "none",
          position: "relative",
          "float": "left",
          background: "#eee",
          padding: "0px"
        }
      }, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-icon-bar",
        key: "tile-icon-bar-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: 1,
          position: "absolute",
          height: "36px",
          width: "100%"
        }
      }, this.renderCheckButton()), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-bottom-bar",
        key: "tile-bottom-bar-" + this.props.index,
        style: {
          padding: "2px",
          pointerEvents: "none",
          position: "absolute",
          minHeight: "0px",
          maxHeight: "160px",
          width: "100%",
          bottom: "0px",
          overflow: "hidden"
        }
      }, tags), customOverlay, /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-overlay",
        key: "tile-overlay-" + this.props.index,
        style: {
          pointerEvents: "none",
          opacity: 1,
          position: "absolute",
          height: "100%",
          width: "100%",
          background: this.state.hover && !this.props.item.isSelected && this.props.isSelectable ? 'linear-gradient(to bottom,rgba(0,0,0,0.26),transparent 56px,transparent)' : 'none'
        }
      }), /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-viewport",
        "data-testid": "grid-gallery-item_viewport",
        style: this.tileViewportStyle(),
        key: "tile-viewport-" + this.props.index,
        onClick: this.props.onClick ? function (e) {
          return _this2.props.onClick.call(_this2, _this2.props.index, e);
        } : null
      }, ThumbnailImageComponent ? /*#__PURE__*/React__default["default"].createElement(ThumbnailImageComponent, _extends({}, this.props, {
        imageProps: thumbnailProps
      })) : /*#__PURE__*/React__default["default"].createElement("img", thumbnailProps)), this.props.item.thumbnailCaption && /*#__PURE__*/React__default["default"].createElement("div", {
        className: "ReactGridGallery_tile-description",
        style: {
          background: "white",
          height: "100%",
          width: "100%",
          margin: 0,
          userSelect: "text",
          WebkitUserSelect: "text",
          MozUserSelect: "text",
          overflow: "hidden"
        }
      }, this.props.item.thumbnailCaption));
    }
  }]);

  return Image;
}(React.Component);

Image.propTypes = {
  item: PropTypes__default["default"].object,
  index: PropTypes__default["default"].number,
  margin: PropTypes__default["default"].number,
  height: PropTypes__default["default"].number,
  isSelectable: PropTypes__default["default"].bool,
  onClick: PropTypes__default["default"].func,
  onSelectImage: PropTypes__default["default"].func,
  tileViewportStyle: PropTypes__default["default"].func,
  thumbnailStyle: PropTypes__default["default"].func,
  tagStyle: PropTypes__default["default"].object,
  customOverlay: PropTypes__default["default"].element,
  thumbnailImageComponent: PropTypes__default["default"].func
};
Image.defaultProps = {
  isSelectable: true,
  hover: false
};

module.exports = Image;
//# sourceMappingURL=Image.js.map
